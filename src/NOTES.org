# 16-Apr
* Things left TODO:
* TODO Log repair or "catch up"
* TODO Leader elections
** TODO Once the basics are in, there are many edge cases, such neutralizing old leaders
* TODO Better network protocol?
** TODO go-raft uses a Transport interface (which I think it only uses HTTP) -> should we have such as thing?
* TODO Addition of new peers: dynamic configuration changes
** Requires a two-phase protocol
* TODO Refactor some of the large methods to more composed functions (may require properly using Rust lifetime notation)
* TODO Should some of the functionality be moved into the peer impl??
* TODO While client requests are sent with a UUID, the "exactly-once semantics" are not enforced by the server (leader)
** the idx_term_hist field in Log needs to be updated to retain UUID?  Other ideas?

Using the 6 areas of the Ousterhout presentation

1. Leader election
** Status: not done, no design thought out; heartbeats are in place (as part of normal operation), so lack of heartbeats as trigger for candidate state is ready
** Priority: High

2. Normal Operation
** Status: significant progress, some edge cases not handled
** Priority: High

3. Safety and consistency after leader changes
** Status: many safety features added as part of normal operation, but log repair or "catch up" not implemented yet
** Priority: High

4. Neutralize old leaders
** Status: not done, not started
** Priority: Medium

5. Client protocol
** Status: significant progress, but missing features, such as:
*** HTTP interface (medium priority)
*** exactly-once semantics (high priority)
** Priority: High

6. Dynamic Configuration Changes (requires a two-phase protocol)
** Status: not done; configuration file format defined for one-time initialization
** Priority: Low

* Done to a first approximation
** Client requests
*** 

# 13-Apr
* QUESTION Should followers send AEResp after a heartbeat AEReq ??
** Maybe yes, but then the peer handlers should send the response to the leader_loop ?
* TODO Need to read go-raft code to see how it handles heartbeat logic 
* IDEA Could have a separate heartbeat thread and when get msg from leader_loop that a message is sent, reset the timer

# 05-Apr
* DONE Add in concept of peers
* DONE If a follower gets a client request, does it have the information needed to send it to the leader?
* Starting to add stateMachine (goraft useless as usual)
* DONE How does a follow know the commit_idx at startup?
* DONE Does the commit_idx need to be written to disk somewhere? Or is it assumed to be the prev_log_idx and revised as more information comes in?

# 22-Mar
* Have implemented truncate and tests passing.
* Tried to change STOP message, but tests were failing (network_listener thread was shutting down, but not the follower thread)
* Where to pick up next: read through AER RPC rules in raft.pdf carefully and outline what else needs to be done
** TODO more test around proper follow log logic
** Have not implement anything around "commited" stated to the StateMachine => need to design how that will work
* Have only implemented follower logic
* Need to implement some Leader logic in terms of receiving from clients and sending to followers
* Follower state servers need to know when a client request is coming in, not a leader message
** QUESTION leaders send AEReqs, what do clients send?  Need to define a protocol/format for that.  What does goraft do?

# 13-Mar
* Create a task to listen on socket 23158 -> takes a Chan to put Events on (maybe just pure JSON messages for now?)
* Peers will communicate via JSON (goraft uses protocol buffers)
* server_loop will grab from the event Port
* Chan is now clonable => if doesnt' work, may need to upgrade compiler (11)



# Misc Rust Notes
* Arc<uint> and unsafely cast a &uint to a &mut AtomicBool
* Vec::new() is the same as ~[]
